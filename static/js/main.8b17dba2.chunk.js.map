{"version":3,"sources":["js/signs.js","js/base.js","components/Listing.js","components/Sidebar.js","components/Main.js","components/AdminListing.js","components/AdminArea.js","components/NotFound.js","App.js","components/Header.js","serviceWorker.js","index.js"],"names":["signs","sign1","name","image","desc","status","sign2","sign3","sign4","sign5","sign6","sign7","sign8","sign9","sign10","sign11","sign12","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","Listing","_this$props$details","this","props","details","react_default","a","createElement","key","className","src","alt","Component","Sidebar","Main","_this","Fragment","components_Sidebar","Object","keys","map","components_Listing","AdminListing","handleChange","event","console","log","currentTarget","value","updatedSign","objectSpread","sign","defineProperty","updateSign","index","htmlFor","type","onChange","AdminArea","components_AdminListing","removeSign","NotFound","App","state","loadSigns","setState","deleteSign","ref","syncState","context","_this2","react_router_dom","react_router","exact","path","render","components_Main","components_AdminArea","component","Header","Boolean","window","location","hostname","match","ReactDOM","components_Header","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b17dba2.chunk.js","sourcesContent":["const signs = {\n\tsign1: {\n\t\tname: 'rat',\n\t\timage: 'rat.svg',\n\t\tdesc: 'Intelligent, adaptable, quick-witted, charming, artistic, sociable',\n\t\tstatus: 'active'\n\t},\n\tsign2: {\n\t\tname: 'ox',\n\t\timage: 'ox.svg',\n\t\tdesc: 'Loyal, reliable, thorough, strong, reasonable, steady, determined',\n\t\tstatus: 'active'\n\t},\n\tsign3: {\n\t\tname: 'tiger',\n\t\timage: 'tiger.svg',\n\t\tdesc: 'Enthusiastic, courageous, ambitious, leadership, confidence, charismatic',\n\t\tstatus: 'active'\n\t},\n\tsign4: {\n\t\tname: 'rabbit',\n\t\timage: 'rabbit.svg',\n\t\tdesc: 'Trustworthy, empathic, modest, diplomatic, sincere, sociable, caretakers, sensitive.',\n\t\tstatus: 'active'\n\t},\n\tsign5: {\n\t\tname: 'dragon',\n\t\timage: 'dragon.svg',\n\t\tdesc: 'Lucky, flexible, eccentric, imaginative, artistic, spiritual, charismatic',\n\t\tstatus: 'active'\n\t},\n\tsign6: {\n\t\tname: 'snake',\n\t\timage: 'snake.svg',\n\t\tdesc: 'Philosophical, organized, intelligent, intuitive, elegant, attentive, decisive',\n\t\tstatus: 'active'\n\t},\n\tsign7: {\n\t\tname: 'horse',\n\t\timage: 'horse.svg',\n\t\tdesc: 'Adaptable, loyal, courageous, ambitious, intelligent, adventurous, strong',\n\t\tstatus: 'active'\n\t},\n\tsign8: {\n\t\tname: 'goat',\n\t\timage: 'goat.svg',\n\t\tdesc: 'Tasteful, crafty, warm, elegant, charming, intuitive, sensitive, calm',\n\t\tstatus: 'active'\n\t},\n\tsign9: {\n\t\tname: 'monkey',\n\t\timage: 'monkey.svg',\n\t\tdesc: 'Quick-witted, charming, lucky, adaptable, bright, versatile, lively, smart',\n\t\tstatus: 'active'\n\t},\n\tsign10: {\n\t\tname: 'rooster',\n\t\timage: 'rooster.svg',\n\t\tdesc: 'Honest, energetic, intelligent, flamboyant, flexible, diverse, confident',\n\t\tstatus: 'active'\n\t},\n\tsign11: {\n\t\tname: 'dog',\n\t\timage: 'dog.svg',\n\t\tdesc: 'Loyal, sociable, courageous, diligent, steady, lively, adaptable, smart',\n\t\tstatus: 'active'\n\t},\n\tsign12: {\n\t\tname: 'pig',\n\t\timage: 'pig.svg',\n\t\tdesc: 'Honorable, philanthropic, determined, optimistic, sincere, sociable.',\n\t\tstatus: 'active'\n\t}\n}\n\nexport default signs;","import Rebase from 're-base';\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyB_U8zIzqEQdvp6ksa3YHdlHSMLGf3pJ0A\",\n    authDomain: \"obey-giant.firebaseapp.com\",\n    databaseURL: \"https://obey-giant.firebaseio.com\"\n});\n\nconst base = Rebase.createClass(firebaseApp.database());\n\nexport { firebaseApp };\nexport default base;","import React, { Component } from 'react';\n\nclass Listing extends Component {\n  render() {\n    const { image, name, desc, status } = this.props.details;\n    return (\n      <li key=\"this.props.key\" className={status}>\n        <img src={image} alt={name} />\n        <h2>{name}</h2>\n        <p>{desc}</p>\n      </li>\n    );\n  }\n}\n\nexport default Listing;","import React, { Component } from 'react';\n\nclass Sidebar extends Component {\n\n  render() {\n    return (\n      <h4>ANDRE THE GIANT HAS A POSSE</h4>\n    );\n  }\n}\n\nexport default Sidebar;","import React, { Component } from 'react';\nimport Listing from './Listing';\nimport Sidebar from './Sidebar';\n\nclass Main extends Component {\n\n    render(){\n        return(\n        <React.Fragment>\n            <Sidebar />\n            <div> \n                <ul className=\"signs\">\n                    {Object.keys(this.props.signs).map(key => (\n                        <Listing \n                            key={key}\n                            details={this.props.signs[key]} \n                        />\n                    ))}\n                </ul>\n            </div>\n        </React.Fragment>\n        );\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\n\nclass AdminListing extends Component {\n  \n  handleChange = event => {\n    console.log(event.currentTarget.value);\n    console.log(event.currentTarget.name);\n\n    const updatedSign = {\n      ...this.props.sign,\n      // ES6 dynamically get the 'name' attribute of the\n      // input element that is being updated.\n      // [event.currentTarget.name]\n      // Then set the value to whatever is entered in that input:\n      [event.currentTarget.name]: event.currentTarget.value\n    };\n\n    console.log(updatedSign);\n    this.props.updateSign(this.props.index, updatedSign);\n  };\n\n  render() {\n    return (\n      <div className=\"sign-edit\">\n        <div className=\"controlgroup\">\n          <label htmlFor=\"name\">Name: </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.props.sign.name}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div className=\"controlgroup\">\n          <label htmlFor=\"status\">Status</label>\n          <select\n            name=\"status\"\n            onChange={this.handleChange}\n            value={this.props.sign.status}\n          >\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n          </select>\n        </div>\n        <div className=\"controlgroup\">\n          <textarea\n            name=\"desc\"\n            onChange={this.handleChange}\n            value={this.props.sign.desc}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AdminListing;","import React, { Component } from 'react';\nimport AdminListing from './AdminListing';\n\nclass AdminArea extends Component {\n    render() {\n        return ( \n            <ul>\n                {Object.keys(this.props.signs).map(key => (\n                    <AdminListing \n                        key={key} \n                        index={key} \n                        sign={this.props.signs[key]}\n                        updateSign={this.props.updateSign}\n                        removeSign={this.props.removeSign}\n                    />\n                ))}\n            </ul>\n        );\n    }\n}\n\nexport default AdminArea;","import React from 'react';\n\nconst NotFound = () => (\n  <div>\n    <h2>Not Found</h2>\n  </div>\n);\n\nexport default NotFound;","import React, { Component } from 'react';\nimport signs from './js/signs.js';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport base from './js/base';\nimport Main from './components/Main';\nimport AdminArea from './components/AdminArea';\nimport NotFound from './components/NotFound';\n\nclass App extends Component {\n\n  state = {\n    signs: []\n  }\n\n  componentDidMount() {\n    this.ref = base.syncState('signs', {\n      context: this,\n      state: 'signs'\n    });\n  }\n\n  loadSigns = () => {\n    this.setState({ signs });\n  };\n\n  updateSign = (key, updatedSign) => {\n    // console.log('update sign');\n    // 1. copy the current state\n    const signs = { ...this.state.signs };\n    // 2. update that state key/value\n    signs[key] = updatedSign;\n    // 3. set the new copy to the component state\n    this.setState({ signs });\n  };\n\n  deleteSign = () => {\n    console.log('delete sign');\n  };\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\" render={(props) => <Main\n              signs={this.state.signs}            \n            />} />\n            <Route path=\"/admin\" render={(props) => <AdminArea\n                updateSign={this.updateSign}\n                deleteSign={this.deleteSign}\n                signs={this.state.signs}\n              />} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\n\nconst Header = () => (\n  <header>\n    <h1>Admin</h1>\n  </header>\n);\n\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Header from './components/Header';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n    <React.Fragment>\n        <Header />\n        <App />\n    </React.Fragment>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}